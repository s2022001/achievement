# -*- coding: utf-8 -*-
"""re_solve_gauss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1auYQoiM0n3OmhY_95YY6i1yIqu_U9yI9
"""

import numpy as np
import math

def sol_dec(A,b):
  # 行列Aのサイズ(列)を求める
  N=A.shape[1]
  b = b.reshape(-1,1)
  
  # 行列Aのランクを求める
  A_rank=np.linalg.matrix_rank(A)

  # 行列Aとベクトルbを列で結合して、ランクを求める
  Ab=np.concatenate((A, b), axis=1)
  Ab_rank=np.linalg.matrix_rank(Ab)

  if Ab_rank==A_rank:
    if A_rank == N:
      result = "suc"
      #print('解が一意に定まる')
    else:
      #print('不定')
      result = "error1"
  else:
    #print('不能')
    result = "error2"

  return result

def gauss_jordan_elimination(a,b):
  if sol_dec(a,b) == "suc":
    A_size = len(a) #行列の大きさを取得
    calc_num = A_size - 1

    b = b.reshape(-1,1) 

    A = np.concatenate([a, b], 1)

    for i in range(A_size):
      A[i] = A[i] / A[i,i] #対角要素を１に
      for n in range(i+1, A_size):
        A[n] -= A[n, i] * A[i]

    for x in range(A_size):
      for y in range(x+1, A_size):
        A[x] = A[x] / A[x, y]
        A[x] -= A[y]
    
    for i in range(A_size):
      A[i] = A[i] / A[i,i]

    vec_a = A[:, A_size]

    return vec_a

  elif sol_dec(a,b) == "error1":
    print('不定')

  elif sol_dec(a,b) == "error2":
    print('不能')

#A = np.array([[2.0, -4, 8],[3, -4, 18],[2, 5, 9]])
#A = np.array([[1,2,-2],[1,-1,3],[2,3,-5]])
#A = np.array([[3.0,4,1], [2,1,2], [1,2,3]])

#b = np.array([44, 76, 11])
#b = np.array([3,4,1])
#b = np.array([5,8,3])

#問一
A = np.array([[4.0, -7, 4], [1, 1, -1], [2, 5, -8]])
b = np.array([1, 6, 3])
#問二
#A = np.array([[1.0, 2, -5], [2, 3, -7], [4, -1, 7]])
#b = np.array([4, 7, 7])
#問三
#A = np.array([[1.0, 2, -5], [2, 3, -7], [4, -1, 7]])
#b = np.array([4, 7, 8])

gauss_jordan_elimination(A, b)